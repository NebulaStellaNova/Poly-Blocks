import funkin.ui.MusicBeatState;

import haxe.ui.RuntimeComponentBuilder;

import haxe.ui.core.Screen;
import haxe.ui.core.Component;
import haxe.ui.core.TextDisplay;

import haxe.ui.components.Label;
import haxe.ui.components.Button;
import haxe.ui.components.TabBar;
import haxe.ui.components.Column;
import haxe.ui.components.DropDown;
import haxe.ui.components.TextArea;
import haxe.ui.components.CheckBox;
import haxe.ui.components.TextField;
import haxe.ui.components.NumberStepper;

import haxe.ui.containers.Box;
import haxe.ui.containers.HBox;
import haxe.ui.containers.VBox;
import haxe.ui.containers.Header;
import haxe.ui.containers.TabView;
import haxe.ui.containers.ListView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.ScrollView;
import haxe.ui.containers.HorizontalSplitter;

import haxe.ui.containers.menus.Menu;
import haxe.ui.containers.menus.MenuBar;
import haxe.ui.containers.menus.MenuItem;
import haxe.ui.containers.menus.MenuCheckBox;
import haxe.ui.containers.menus.MenuOptionBox;
import haxe.ui.containers.menus.MenuSeparator;

import haxe.ui.containers.dialogs.Dialog;

import haxe.ui.containers.windows.Window;
import haxe.ui.containers.windows.WindowManager;

import haxe.ui.data.ArrayDataSource;

import haxe.ui.macros.ComponentMacros;

import funkin.input.Cursor;

import haxe.ui.containers.dialogs.OpenFileDialog;

import funkin.util.FileUtil;
import funkin.util.MathUtil;

import funkin.modding.PolymodHandler;

import flixel.util.FlxColor;

import funkin.ui.mainmenu.MainMenuState;

import funkin.graphics.FunkinSprite;

import flixel.FlxCamera;
import flixel.FlxG;

// -- Shaders -- \\
import funkin.graphics.shaders.GaussianBlurShader;

class PolyblocksEditor extends MusicBeatState {

    public var blurShader:GaussianBlurShader = new GaussianBlurShader();

    public var camHUD:FlxCamera;
	public var camGame:FlxCamera;
	public var camInteract:FlxCamera;
    public var camBackground:FlxCamera;

    public var menuBar:MenuBar;

    public var editorTitle:String = "Poly Blocks";
    public var editorVersion:String = "???";

    function new() {
        super('PolyblocksEditor');
    }

    function create() {
        super.create();
        Cursor.show();

        camBackground = new FlxCamera();
        camBackground.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(camBackground, false);

        camGame = new FlxCamera();
        camGame.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(camGame, false);

        camInteract = new FlxCamera();
        camInteract.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(camInteract, false);

        camHUD = new FlxCamera();
        camHUD.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(camHUD, true);

        var bg = new FunkinSprite(0, 0).loadGraphic(Paths.image('menuDesat'));
		bg.scrollFactor.set(0, 0);
		bg.setGraphicSize(FlxG.width, FlxG.height);
		bg.updateHitbox();
		bg.screenCenter();
		// bg.alpha = 0.5;
		bg.cameras = [camBackground];
        bg.shader = blurShader;
		add(bg);

        for (i in PolymodHandler.getAllMods()) {
            if (i.title == editorTitle) {
                // editorFolder = i.id;
                editorVersion = i.modVersion.version.join(".");
            } 
        }

        var style = RuntimeComponentBuilder.build(Paths.ui("polyblocks/styles/main"));
        add(style);

        menuBar = RuntimeComponentBuilder.build(Paths.ui("polyblocks/menubar"));
        menuBar.findComponent("menuBarTitle").text = editorTitle + " v" + editorVersion;
        add(menuBar);
        
        var mainview = RuntimeComponentBuilder.build(Paths.ui("polyblocks/mainview"));
        mainview.y = menuBar.y + menuBar.height;
        add(mainview);

        var exitToMenuCallback = ()->{
            FlxG.switchState(new MainMenuState());
            // PolymodHandler.forceReloadAssets();
        }

        menuBar.findComponent("exitToMenu").onClick = exitToMenuCallback;
    }

    function update() {
        super.update();        
        get_conductorInUse().update();
    }

    override function beatHit() {
        super.beatHit();
        var curBeat = get_conductorInUse().currentBeat;
    }
    override function stepHit() {
        super.stepHit();
        var curStep = get_conductorInUse().currentStep;
    }

    function destroy() {
        super.destroy();
        Cursor.hide();
    }

}