import funkin.ui.MusicBeatState;

import haxe.ui.RuntimeComponentBuilder;

import haxe.ui.core.Screen;
import haxe.ui.core.Component;
import haxe.ui.core.TextDisplay;

import haxe.ui.components.Label;
import haxe.ui.components.Button;
import haxe.ui.components.TabBar;
import haxe.ui.components.Column;
import haxe.ui.components.DropDown;
import haxe.ui.components.TextArea;
import haxe.ui.components.CheckBox;
import haxe.ui.components.TextField;
import haxe.ui.components.NumberStepper;

import haxe.ui.containers.Box;
import haxe.ui.containers.HBox;
import haxe.ui.containers.VBox;
import haxe.ui.containers.Header;
import haxe.ui.containers.TabView;
import haxe.ui.containers.ListView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.ScrollView;
import haxe.ui.containers.HorizontalSplitter;

import haxe.ui.containers.menus.Menu;
import haxe.ui.containers.menus.MenuBar;
import haxe.ui.containers.menus.MenuItem;
import haxe.ui.containers.menus.MenuCheckBox;
import haxe.ui.containers.menus.MenuOptionBox;
import haxe.ui.containers.menus.MenuSeparator;

import haxe.ui.containers.dialogs.Dialog;

import haxe.ui.containers.windows.Window;
import haxe.ui.containers.windows.WindowManager;

import haxe.ui.data.ArrayDataSource;

import haxe.ui.macros.ComponentMacros;

import funkin.input.Cursor;
import funkin.input.CursorMode;

import haxe.ui.containers.dialogs.OpenFileDialog;

import funkin.util.FileUtil;
import funkin.util.MathUtil;

import funkin.modding.PolymodHandler;

import flixel.util.FlxColor;

import funkin.ui.mainmenu.MainMenuState;

import funkin.graphics.FunkinSprite;
import flixel.util.FlxTimer;

import flixel.FlxCamera;
import flixel.FlxG;

// -- Shaders -- \\
import funkin.graphics.shaders.GaussianBlurShader;

import haxe.Json;

import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;

import haxe.ui.backend.flixel.CursorHelper;

import funkin.modding.module.Module;

import StringTools;
using StringTools;

class PolyblocksEditor extends MusicBeatState {

    public var projectName:String = "Test Project";
    public var projectType:String = "module";

    public var blurShader:GaussianBlurShader = new GaussianBlurShader();

    public var camHUD:FlxCamera;
    public var camMenu:FlxCamera;
	public var camGame:FlxCamera;
	public var camInteract:FlxCamera;
    public var camBackground:FlxCamera;

    public var menuBar:MenuBar;
    public var mainView;

    public var editorTitle:String = "Poly Blocks";
    public var editorVersion:String = "???";
    public var editorFolder:String = "???";

    public var selectedBlock = null;
    public var callbackList = [];
    public var blockList = [];
    public var blocks = [];

    public var viewOffset:Int = 0;

    public var blockOffset = {
        x: 0,
        y: 0
    }

    function new() {
        super('PolyblocksEditor');
    }

    function create() {
        super.create();
        Cursor.show();

        for (i in PolymodHandler.getAllMods()) {
            if (i.title == editorTitle) {
                editorFolder = i.id;
            }
        }

        for (i in FileUtil.readDir("mods/" + editorFolder + "/data/ui/polyblocks/blocks")) {
            var id = i.replace(".xml", "");
            blockList.push(id);
            if (["callback", "properties"].contains(getData(RuntimeComponentBuilder.build(Paths.ui("polyblocks/blocks/" + id))).type))
                callbackList.push(id);
        }
        
        // trace(blockList);

        camBackground = new FlxCamera();
        camBackground.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(camBackground, false);

        camGame = new FlxCamera();
        camGame.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(camGame, false);
        
        camHUD = new FlxCamera();
        camHUD.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(camHUD, true);

        camInteract = new FlxCamera();
        camInteract.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(camInteract, false);

        camMenu = new FlxCamera();
        camMenu.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(camMenu, false);

        var bg = new FunkinSprite(0, 0).loadGraphic(Paths.image('menuDesat'));
		bg.scrollFactor.set(0, 0);
		bg.setGraphicSize(FlxG.width, FlxG.height);
		bg.updateHitbox();
		bg.screenCenter();
		bg.alpha = 0.25;
		bg.cameras = [camBackground];
        // bg.shader = blurShader;
		add(bg);

        for (i in PolymodHandler.getAllMods()) {
            if (i.title == editorTitle) {
                // editorFolder = i.id;
                editorVersion = i.modVersion.version.join(".");
            } 
        }

        var style = RuntimeComponentBuilder.build(Paths.ui("polyblocks/styles/main"));
        add(style);

        menuBar = RuntimeComponentBuilder.build(Paths.ui("polyblocks/menubar"));
        menuBar.findComponent("menuBarTitle").text = editorTitle + " v" + editorVersion;
        add(menuBar);
        
        mainview = RuntimeComponentBuilder.build(Paths.ui("polyblocks/mainview"));
        mainview.y = menuBar.y + menuBar.height;
        mainview.findComponent("hideButton").findComponent("label").text = "<\n<\n<";
        /* var tab = new Button();
        tab.text = projectName;
        mainview.findComponent("tb").addComponent(tab); */
        add(mainview);

        mainview.findComponent("hideButton").onClick = ()->{
            //mainview.findComponent("hideButton").flipX = !mainview.findComponent("hideButton").flipX;
            if (mainview.findComponent("hideButton").findComponent("label").text == "<\n<\n<") {
                mainview.findComponent("hideButton").findComponent("label").text = ">\n>\n>";
            } else {
                mainview.findComponent("hideButton").findComponent("label").text = "<\n<\n<";
            }
        }

        trace(FlxG.height - menuBar.height);

        var exitToMenuCallback = ()->{
            FlxG.switchState(new MainMenuState());
            // PolymodHandler.forceReloadAssets();
        }

        menuBar.findComponent("exitToMenu").onClick = exitToMenuCallback;

        // trace(new Callback("onCreate"));
    }

    function checkBlock(block, block2, callback)  {
        if (block.y > block2.y + block2.height - 1 && block.y < block2.y + block2.height + 1 &&
            block.x == block2.x) {
            for (i in blocks) {
                checkBlock(i, block, callback);
            }
            callback(block, block2);
        }
    }

    function setMemberCameras(item, cameras) {
        item.cameras = cameras;
        if (item.scrollFactor != null)
            item.scrollFactor.set(1, 1);
        if (item.members != null) {
            for (member in item.members) {
                setMemberCameras(member, cameras);
            }
        }
    }

    var rightClickMenu;
    var rightClickBlock;

    var updateText = false;
    function update() {
        super.update();        
        get_conductorInUse().update();

        
        if (FlxG.mouse.justPressedRight) {
            if (members.contains(rightClickMenu) && rightClickMenu != null)
                remove(rightClickMenu);

            rightClickBlock = null;
            for (i in blocks) {
                if (FlxG.mouse.overlaps(i, camGame)) {
                    rightClickBlock = i;
                    trace(i);
                }
            }

            if (rightClickBlock != null) {
                rightClickMenu = RuntimeComponentBuilder.build(Paths.ui("polyblocks/rightClickMenu" + (["callback", "properties"].contains(getData(rightClickBlock).type) ? "Callback" : "")));
                rightClickMenu.x = FlxG.mouse.x;
                rightClickMenu.y = FlxG.mouse.y;
                rightClickMenu.cameras = [camMenu];
                add(rightClickMenu);
    
                rightClickMenu.findComponent("delete").onClick = ()->{
                    FlxTween.tween(rightClickBlock.scale, {x: 0, y: 0}, 0.25, {
                        onComplete: ()->{
                            remove(rightClickBlock);
                        },
                        onStart: ()->{
                            blocks.remove(rightClickBlock);
                        }
                    });
                }
                
                rightClickMenu.findComponent("duplicate")?.onClick = ()->{
                    var cloned = rightClickBlock.cloneComponent();
                    cloned.x = rightClickBlock.x;
                    cloned.y = rightClickBlock.y + rightClickBlock.height;
                    add(cloned);
                    blocks.push(cloned);
                }
            } else if (!FlxG.mouse.overlaps(mainview.findComponent("blockList"))){
                rightClickMenu = RuntimeComponentBuilder.build(Paths.ui("polyblocks/rightClickMenuSpace"));
                rightClickMenu.x = FlxG.mouse.x;
                rightClickMenu.y = FlxG.mouse.y;
                rightClickMenu.cameras = [camMenu];
                add(rightClickMenu);

                rightClickMenu.findComponent("clearAll").onClick = ()->{
                    for (i in blocks) {
                        FlxTween.tween(i.scale, {x: 0, y: 0}, 0.25, {
                            onComplete: ()->{
                                remove(i);
                            },
                            onStart: ()->{
                                blocks.remove(i);
                            }
                        });
                    }
                }
            }
        }

        if (FlxG.mouse.justReleased) {
            if (members.contains(rightClickMenu) && rightClickMenu != null)
                remove(rightClickMenu);
            rightClickMenu = null;
        }
        
        viewOffset = mainview.findComponent("hideButton").findComponent("label").text == ">\n>\n>" ? -mainview.findComponent("blockList").width : 0;
        mainview.x = MathUtil.coolLerp(mainview.x, viewOffset, 0.1);
        mainview.findComponent("hideButton").offset.x = 7;
        for (i in blockList) {
            if (FlxG.mouse.overlaps(mainview.findComponent(i)) && FlxG.mouse.justPressed && !mainview.findComponent(i).disabled && rightClickMenu == null) {
                var block = RuntimeComponentBuilder.build(Paths.ui("polyblocks/blocks/" + i));
                block.x = FlxG.mouse.x - (block.width/2);
                block.y = FlxG.mouse.y - (block.height/2);
                block.x += camGame.scroll.x / camGame.zoom;
                block.y += camGame.scroll.y / camGame.zoom;
                block.cameras = [camGame];
                if (block.findComponent("superText") != null) {
                    block.findComponent("superText").text = block.findComponent("superText").text.replace("${projectName}", projectName);
                    block.findComponent("superText").text = block.findComponent("superText").text.replace("'", '"');
                }
                if (getData(block).id == "projectProperties") {
                    block.findComponent("name").text = projectName;
                    block.findComponent("name").onChange = ()->{
                        for (i in blocks) {
                            i.findComponent("superText")?.text = i.findComponent("superText")?.text?.replace('"' + projectName + '"', '"' + block.findComponent("name").text + '"');
                        }
                        projectName = block.findComponent("name").text;
                    }
                    block.findComponent("type").onChange = ()->{
                        projectType = block.findComponent("type").selectedItem.id;
                        // trace(block.findComponent("type").selectedItem);
                        //trace(projectType);
                    }
                }
                selectedBlock = block;
                blocks.push(block);
                add(block);
            }
        }

        for (i in blocks) {
            if (FlxG.mouse.overlaps(i, camGame) && FlxG.mouse.justPressed) {
                selectedBlock = i;
                // selectedBlock.disabled = true;
            }
        }

        if (FlxG.mouse.justReleased && selectedBlock != null) {
            if (selectedBlock.overlaps(mainview.findComponent("blockList"))) {
                var b = selectedBlock;
                FlxTween.tween(selectedBlock.scale, {x: 0, y: 0}, 0.25, {
                    onComplete: ()->{
                        remove(b);
                    },
                    onStart: ()->{
                        blocks.remove(b);
                    }
                });
            }
            for (block in blocks) {
                checkBlock(block, selectedBlock, (block, b2)->{
                    if (block.overlaps(mainview.findComponent("blockList"))) {
                        var b = block;
                        FlxTween.tween(block.scale, {x: 0, y: 0}, 0.25, {
                            onComplete: ()->{
                                remove(b);
                                updateText = true;
                            },
                            onStart: ()->{
                                blocks.remove(b);
                                updateText = true;
                            }
                        });
                    }
                });
            }
            
            for (block in blocks) {
                block.disabled = false;
                if (block == selectedBlock) continue;
                if (selectedBlock.overlaps(block)) {
                    selectedBlock.x = block.x;
                    selectedBlock.y = block.y + block.height;
                }
            }
            selectedBlock.disabled = false;
            
            selectedBlock = null;
        }
        if (selectedBlock != null) {
            if (getData(selectedBlock).type == "callback") {
                for (i in blocks) {
                    if (i == selectedBlock) continue;
                    var group = [];
                    checkBlock(i, selectedBlock, (block, b2)->{
                        block.cameras = [camInteract];
                        block.x = b2.x + (FlxG.mouse.deltaX / camGame.zoom);
                        block.y = b2.y + b2.height + (FlxG.mouse.deltaY / camGame.zoom);
                        group.push(block);
                    });
                }
            }
            selectedBlock.cameras = [camInteract];
            selectedBlock.x += FlxG.mouse.deltaX / camGame.zoom;
            selectedBlock.y += FlxG.mouse.deltaY / camGame.zoom;

            if (FlxG.mouse.deltaX + FlxG.mouse.deltaY != 0) {
                selectedBlock.disabled = true;
                Cursor.set_cursorMode(CursorMode.Grabbing);
                for (i in blocks) {
                    checkBlock(i, selectedBlock, (block, b2)->{
                        block.disabled = selectedBlock.disabled;
                    });
                }
            }
        } else {
            for (block in blocks) {
                if (!block.overlaps(mainview.findComponent("blockList")))
                block.cameras = [camGame];
            }
            if (FlxG.mouse.pressed && !FlxG.mouse.overlaps(mainview.findComponent("blockList"))) {
                Cursor.set_cursorMode(CursorMode.Grabbing);
                for (i in blocks) {
                    if (i.x != null && i.y != null) {
                        i.x += FlxG.mouse.deltaX / camGame.zoom;
                        i.y += FlxG.mouse.deltaY / camGame.zoom;
                    }
                }
                blockOffset.x += FlxG.mouse.deltaX / camGame.zoom;
                blockOffset.y += FlxG.mouse.deltaY / camGame.zoom;
            } else if (Cursor.cursorMode == CursorMode.Grabbing) {
                Cursor.set_cursorMode(CursorMode.Default);
            }
            /* for (i in blocks) {
                i.scale.x -= FlxG.mouse.wheel/100;
                i.scale.y -= FlxG.mouse.wheel/100;
                i.x *= (FlxG.mouse.wheel/100) + 1;
                i.y *= (FlxG.mouse.wheel/100) + 1;
            }
            //camGame.zoom += FlxG.mouse.wheel/10; */
        }
        

        for (call in callbackList)
            mainview.findComponent(call).disabled = false;

        for (i in blocks) {
            i.scrollFactor.set(1, 1);

            for (call in callbackList) {
                if (getData(i).id.startsWith(call)) {
                    // trace(call);
                    mainview.findComponent(call).disabled = true;
                }
            }
        }

        for (block in blocks) {
            for (member in block.members) {
                setMemberCameras(members, block.cameras);
            }
        }

        camInteract.zoom = camGame.zoom;
        camInteract.scroll.x = camGame.scroll.x;
        camInteract.scroll.y = camGame.scroll.y;

        mainview.findComponent("onEventCall").disabled = projectType != "event";
        // mainview.findComponent("onEventCall").alpha = projectType == "event" ? : 0.5;

        // if (FlxG.mouse.justReleased || updateText) {
            // if (updateText) updateText = false;
            // For testing
            
            // trace('\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'+getScript());
        // }
    }

    function getScript() {
        // projectType = "module";
        var imports = [];
        var addImport = (import)->{
            if (!imports.contains(import))
                imports.push("import " + import + ";");
        }
        var callbacks = [];
        var i = 0;
        for (block in blocks) {
            if (getData(block).type == "callback") {
                var callback = new Callback(getData(block).callbackName);
                callback.isSuper = getData(block).isSuper;
                if (callback.callbackName == "new") {
                    callback.lines.insert(0, 'super("' + projectName + '");');
                }
                /* if (callback.callbackName == "handleEvent") {
                    projectType = "event";
                } */
                var group = [];
                for (block2 in blocks) {
                    checkBlock(block2, block, (block, b2)->{
                        group.push(block);
                        if (getData(block).id.toLowerCase().contains("strumline")) {
                            addImport("funkin.play.PlayState");
                        }
                        if (getData(block).id.toLowerCase().contains("tween")) {
                            addImport("flixel.tweens.FlxTween");
                            addImport("flixel.tweens.FlxEase");
                        }
                    });
                }
                var groupFinal = [];
                for (i in group) {
                    groupFinal.insert(0, i);
                }
                for (i in groupFinal) {
                    callback.lines.push(processBlockData(i));
                    // trace("\t" + getData(i).id);
                }
                callbacks.push(callback);
            }
            i++;
        }
        var thing = [];
        for (i in callbacks) {
            var str = i.toString();
            var lines = str.split("\n");
            thing.push(lines.join("\n\t"));
        }

        var extension = "";
        switch (projectType) {
            case "event":
                extension = " extends SongEvent";
                addImport("funkin.play.event.SongEvent");
            case "module":
                extension = " extends Module";
                addImport("funkin.modding.module.Module");
        }

        return imports.join("\n") + "\n\nclass " + projectName.replace(" ", "") + extension + " {\n\t" + thing.join("\n\n\t") + "\n}";
    }

    function getData(obj) {
        var str = obj.id;
        str = str.replace("'", '"');
        return Json.parse(str);
    }

    function processBlockData(obj) {
        var data = getData(obj);
        switch (data.id) {
            case "moveStrumlineBlock":
                var getDirection = function(dir) {
                    switch (dir.toLowerCase()) {
                        case "left":
                            return "x -=";
                        case "right":
                            return "x +=";
                        case "up":
                            return "y -=";
                        case "down":
                            return "y +=";
                    }
                }
                var strumline = obj.findComponent("target").selectedItem.text;
                var line = "PlayState.instance." + (strumline == "Player" ? 'playerStrumline' : 'opponentStrumline') + ".";
                line += "" + getDirection(obj.findComponent("direction").selectedItem.text) + " ";
                line += obj.findComponent("amount").pos + ";";
                return line;
                /* trace("Move '" + obj.findComponent("target").selectedItem.text + "' strumline");
                trace("In direction '" +  + "'");
                trace("Amount '" + obj.findComponent("amount").pos + "'"); */
            case "tweenStrumlineBlock":
                var line = "FlxTween.tween(PlayState.instance.${strumline}, { ${direction}: PlayState.instance.${strumline}.${direction} ${operator} ${amount} });";
                var getDirection = function(dir) {
                    switch (dir.toLowerCase()) {
                        case "left", "right":
                            return "x";
                        case "up", "down":
                            return "y";
                    }
                }
                var getOperator = function(dir) {
                    switch (dir.toLowerCase()) {
                        case "left", "up":
                            return "-";
                        case "right", "down":
                            return "+";
                    }
                }
                var getStrumline = function(type) {
                    switch (type.toLowerCase()) {
                        case "player":
                            return "playerStrumline";
                        case "opponent":
                            return "opponentStrumline";
                    }
                }
                line = line.replace("${direction}", getDirection(obj.findComponent("direction").selectedItem.text));
                line = line.replace("${operator}", getOperator(obj.findComponent("direction").selectedItem.text));
                line = line.replace("${strumline}", getStrumline(obj.findComponent("strumline").selectedItem.text));
                line = line.replace("${amount}", obj.findComponent("amount").pos);
                return line;
            case "screenCenterBlock":
                return obj.findComponent("obj").text + ".screenCenter();";
            case "customLineBlock":
                return obj.findComponent("obj").text.replace("\\n", "\n\t");
        }
        return "";
    }

    override function beatHit() {
        super.beatHit();
        var curBeat = get_conductorInUse().currentBeat;
    }
    override function stepHit() {
        super.stepHit();
        var curStep = get_conductorInUse().currentStep;
    }

    function destroy() {
        super.destroy();
        Cursor.hide();
    }

}